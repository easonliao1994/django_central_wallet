# Generated by Django 4.1.3 on 2023-05-05 12:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Blockchain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the blockchain network.', max_length=64)),
                ('rpc_url', models.TextField(blank=True, help_text='The URL of the JSON-RPC endpoint for the blockchain network.', null=True)),
                ('chain_id', models.PositiveIntegerField(blank=True, help_text='The chain ID of the blockchain network.', null=True)),
                ('block_explorer_url', models.URLField(blank=True, help_text='The URL of the block explorer for the blockchain network.', null=True)),
                ('last_block', models.BigIntegerField(default=0, help_text='The last block synced by our server for this blockchain network.')),
                ('last_sync_time', models.DateTimeField(auto_now=True, help_text='The timestamp of the last time our server synced with the blockchain network.')),
                ('confirm_times', models.BigIntegerField(default=30, help_text='The number of confirmations required for a block to be considered final on the blockchain network.')),
                ('gas_limit', models.PositiveIntegerField(default=21000, help_text='The gas limit for transactions on the blockchain network.')),
                ('gas_limit_erc20', models.PositiveIntegerField(default=100000, help_text='The gas limit for ERC20 token transactions on the blockchain network.')),
                ('is_auto_sync', models.BooleanField(default=False, help_text='Set to true to automatically sync the blockchain network with our server.')),
            ],
        ),
        migrations.CreateModel(
            name='Coin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(default='ETH', help_text='Same with blockchain symbol.', max_length=32)),
                ('name', models.CharField(default='Ethereum', help_text='Same with blockchain token name.', max_length=32)),
                ('server_decimal', models.IntegerField(default=9, help_text='Number of decimal places used by the blockchain to store the token value.')),
                ('scale', models.IntegerField(default=8, help_text='Maximum number of decimal places to be displayed.')),
            ],
            options={
                'unique_together': {('symbol',)},
            },
        ),
        migrations.CreateModel(
            name='CoinInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decimal', models.IntegerField(default=18, help_text='The number of decimal places for this coin.')),
                ('contract', models.CharField(blank=True, help_text='The smart contract address associated with this coin (if applicable).', max_length=256, null=True)),
                ('blockchain', models.ForeignKey(blank=True, default=None, help_text='The blockchain this coin belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blockchain.blockchain')),
                ('coin', models.ForeignKey(blank=True, default=None, help_text='The cryptocurrency coin that this information is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blockchain.coin')),
            ],
            options={
                'unique_together': {('blockchain', 'coin')},
            },
        ),
        migrations.CreateModel(
            name='CryptoAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='Cryptocurrency wallet address.', max_length=256, unique=True)),
                ('private_key', models.CharField(help_text='Cryptocurrency wallet private key.', max_length=256)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crypto_addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='blockchain',
            name='coin',
            field=models.ForeignKey(blank=True, default=None, help_text='The cryptocurrency associated with this blockchain network.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blockchain.coin'),
        ),
        migrations.CreateModel(
            name='CoinInfoBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_amount', models.DecimalField(decimal_places=0, default=0, help_text='Amount of coins in internal transfer.', max_digits=30)),
                ('external_amount', models.DecimalField(decimal_places=0, default=0, help_text='Amount of coins in external transfer.', max_digits=30)),
                ('coin_info', models.ForeignKey(help_text='Cryptocurrency information.', on_delete=django.db.models.deletion.CASCADE, to='blockchain.coininfo')),
                ('crypto_address', models.ForeignKey(help_text='Cryptocurrency wallet address.', on_delete=django.db.models.deletion.CASCADE, to='blockchain.cryptoaddress')),
            ],
            options={
                'unique_together': {('crypto_address', 'coin_info')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='blockchain',
            unique_together={('name',)},
        ),
    ]
